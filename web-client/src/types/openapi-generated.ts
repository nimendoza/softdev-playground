/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


/** Type helpers */
type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };
type XOR<T, U> = (T | U) extends object ? (Without<T, U> & U) | (Without<U, T> & T) : T | U;
type OneOf<T extends any[]> = T extends [infer Only] ? Only : T extends [infer A, infer B, ...infer Rest] ? OneOf<[XOR<A, B>, ...Rest]> : never;

export interface paths {
  "/V1/users": {
    put: {
      requestBody?: {
        content: {
          "application/json": components["schemas"]["LoginPayload"];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["LoginUser"];
          };
        };
        /** @description Bad request */
        400: {
          content: {
            "application/json": components["schemas"]["LoginError"];
          };
        };
        /** @description Internal server error */
        500: never;
      };
    };
    post: {
      requestBody?: {
        content: {
          "application/json": components["schemas"]["RegisterUserPayload"];
        };
      };
      responses: {
        /** @description OK */
        200: never;
        /** @description Bad request */
        400: {
          content: {
            "application/json": components["schemas"]["RegisterUserError"];
          };
        };
        /** @description Internal server error */
        500: never;
      };
    };
  };
}

export interface components {
  schemas: {
    LoginPayload: {
      email: string;
      password: string;
    };
    RegisterUserPayload: {
      email: string;
      password: string;
      passwordConfirm: string;
    };
    LoginUser: {
      jwt: string;
      user: components["schemas"]["User"];
    };
    User: {
      id: string;
      email: string;
    };
    LoginError: {
      email?: string;
      password?: string;
    };
    RegisterUserError: {
      email?: string;
      password?: string;
      passwordConfirm?: string;
    };
    UserError: {
      email?: string;
      password?: string;
      passwordConfirm?: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type external = Record<string, never>;

export type operations = Record<string, never>;
